#!/usr/bin/env bash

set -euo pipefail

# Function to show usage
usage() {
    echo "Usage: git commit-fixup-ask"
    echo ""
    echo "Interactively create a fixup commit for staged changes."
    echo "Shows commits in the current branch and lets you pick which one to fixup."
    echo "Only works when you have staged changes ready to commit."
    echo ""
    echo "The command will:"
    echo "  1. Show all commits in current branch (excluding fixup/squash commits)"
    echo "  2. Show which staged files would be affected"
    echo "  3. Let you choose which commit to create a fixup for"
    echo ""
    echo "Examples:"
    echo "  git add file.txt"
    echo "  git commit-fixup-ask"
    echo ""
    echo "Options:"
    echo "  -h, --help    Show this help message"
    exit 1
}

# Handle help flag
if [[ "${1:-}" == "-h" ]] || [[ "${1:-}" == "--help" ]]; then
    usage
fi

# Check if we're in a git repository
if ! [ -d .git ]; then
    echo "Error: Not a git repository" >&2
    exit 1
fi

if git diff --cached --quiet --exit-code; then
    echo "Nothing to commit";
    exit 1;
fi

relativeToHead=0;
for commitId in `git --no-pager log --format=%H "$(git get-main-branch)...HEAD"`; do
    commitMessage=$(git --no-pager log --format=%B -n 1 $commitId)
    if [[ ${commitMessage:0:7} == "fixup! " ]] || [[ ${commitMessage:0:8} == "squash! " ]]; then
        ((relativeToHead++));
        continue;
    fi

    git --no-pager log --pretty="format:${relativeToHead}.  %Cred%h%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset" --date=relative -n1 $commitId;
    echo
    for filename in `git --no-pager diff --cached --name-only;`; do
        git --no-pager diff --stat=160 --color "$commitId" "$commitId^" -- "$filename" | head -n 1;
    done

    ((relativeToHead++));
done
if [ "$relativeToHead" -eq 0 ]; then
    echo "no commits in branch found using $(git get-main-branch)...HEAD range";
    exit 1;
fi
((relativeToHead--))

echo;
read -p "Pick a commit [0..${relativeToHead}]: " targetCommit

if [ -z "${targetCommit##*[!0-9]*}" ]; then
    echo "expected a number in range [0..${relativeToHead}]";
    exit 2;
fi
if [ ! "$targetCommit" -ge 0 -o ! "$targetCommit" -le "$relativeToHead" ]; then
    echo "expected a number in range [0..${relativeToHead}]";
    exit 3;
fi

git commit --fixup "HEAD~$targetCommit"
